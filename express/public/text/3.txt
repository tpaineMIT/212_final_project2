Hello, and welcome to day three! In this module, you’re going to learn how I interface with other automated machinery on the factory floor, even when I’m not physically connected to it. 
We’ll start with learning how I would interface with a conveyor belt to package a box into one of the bins from the last module.
Let’s say the conveyor belt is set up to deliver one empty box to me every five seconds, then stop for two seconds for me to pick up the package, then continue. No matter what I do, the conveyor belt will do this.
As long as the conveyor belt repeats this exact process every time, I have a few options for figuring out when to pick the box off the belt.
The first one we'll talk about is purely about timing. Since I know that the conveyor belt is doing a repetitive cycle thats constantly timed, I can just use that to figure out when to grab the box, and even when to place it back. That would look something like this.
This kind of methodology is known as timing based coordination.
Timing based coordination is great for things like this where I know exactly the amount of time that motions will take place. But what happens if the timing gets messed up, even by a small amount?
Something like this would happen.
Can you fix this by programming a different amount of time I should wait before attemping to grab the box? You can change the wait time using the scroll wheel. 
Seems like this one isn't working that well. Can you try again?
Hmmmm. It seems like there just isn't a perfect timing for all of the boxes being dispensed. The timing is very inconsistent.
This problem kind of reminds me of when I tried to move my arm to a target in Module 1 and missed the target. Because I didn't listen very closely to feedback I was receiving, I would miss the target because I was, to some extent, guessing my position. 
A similar problem happened here: because the conveyor belt isn’t communicating with me at all, I have to guess when the conveyor belt has placed a box in front of me.
Just like when I “closed the loop” by listening to my encoders so that I could correct the overshoot and undershoot of my arm in module 1, I’m going to need to communicate with the conveyor belt so that I know when a box is ready for me to pick up. 
Setting up that kind of communication might take some time. For now, can you tell me when to start? 
Whenever you see the box is in the designated pickup location, press the Scroll wheel button on my arm. The designated pickup location is indicated by the red tape.
Keep it going! You're doing great!
So as you can see, this kind of planning works a lot better when theres some inconsistency with the motions I'm dealing with. This kind of methodology is called event based coordination.
That said, it wouldn't be good if I relied on a human being to just tell me when it's time to move a box. 
Let me tell you about the communication I'm going to be using with the conveyor belt. Whenever an object on the conveyor belt is moved to the pick up location, the conveyor belt sends a message to me and turns on the big red light, like this.
After the conveyor belt sends a message to me, it waits for me to send a message back before turning of the red light and then continuing to move. With that in mind, I'm not going to send it a message again until after I've picked up the box.
The whole process would look something like this.
After watching the process, it probably looked really straight forward. In reality, I several different actions to complete the process. 
Now, could you try to recreate the process with the actions I've shown? Use the scroll wheel to choose the actions. Press the Back button if you make a mistake. Press the Square button to select the process you've programmed. To see what the process looks like again, press the I button.
Selecting the order of actions is a form of "programming." It's how people, like you, can set instructions for robot systems to complete tasks.
Now, you might be wondering, "Why would I ever do timing based coordination, if event based coordination is just so much more useful?"
As a general idea, it's easier to program timing based coordination, but there are some specific instances that are great with timing based coordination. 
That'll come up later on when we go over more important things in programming in later modules!
Are you sure you have the right number of actions?
Your commands seem to be not quite right.
That action looks like this. 
Use the scroll wheel to choose the actions. Press the Back button if you make a mistake. Press the Square button to select the process you've programmed. To see what the process looks like again, press the I button.